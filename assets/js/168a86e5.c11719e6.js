"use strict";(self.webpackChunkrescript_date_docs=self.webpackChunkrescript_date_docs||[]).push([[760],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),i=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},h=function(e){var t=i(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),c=i(n),p=r,u=c["".concat(d,".").concat(p)]||c[p]||m[p]||s;return n?a.createElement(u,l(l({ref:t},h),{},{components:n})):a.createElement(u,l({ref:t},h))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var i=2;i<s;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5606:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return i},toc:function(){return h},default:function(){return c}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),l=["components"],o={id:"month",title:"Month"},d=void 0,i={unversionedId:"api/month",id:"api/month",isDocsHomePage:!1,title:"Month",description:"addMonths",source:"@site/docs/api/month.md",sourceDirName:"api",slug:"/api/month",permalink:"/rescript-date/docs/api/month",editUrl:"https://github.com/mobily/rescript-date/edit/master/docs/docs/api/month.md",tags:[],version:"current",lastUpdatedAt:1636805091,formattedLastUpdatedAt:"11/13/2021",frontMatter:{id:"month",title:"Month"},sidebar:"sidebar",previous:{title:"Weekday",permalink:"/rescript-date/docs/api/weekday"},next:{title:"Year",permalink:"/rescript-date/docs/api/year"}},h=[{value:"addMonths",id:"addmonths",children:[],level:3},{value:"subMonths",id:"submonths",children:[],level:3},{value:"getMonth",id:"getmonth",children:[],level:3},{value:"setMonth",id:"setmonth",children:[],level:3},{value:"differenceInCalendarMonths",id:"differenceincalendarmonths",children:[],level:3},{value:"differenceInMonths",id:"differenceinmonths",children:[],level:3},{value:"startOfMonth",id:"startofmonth",children:[],level:3},{value:"endOfMonth",id:"endofmonth",children:[],level:3},{value:"isFirstDayOfMonth",id:"isfirstdayofmonth",children:[],level:3},{value:"isLastDayOfMonth",id:"islastdayofmonth",children:[],level:3},{value:"isSameMonth",id:"issamemonth",children:[],level:3},{value:"lastDayOfMonth",id:"lastdayofmonth",children:[],level:3},{value:"getDaysInMonth",id:"getdaysinmonth",children:[],level:3}],m={toc:h};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"addmonths"},"addMonths"),(0,s.kt)("p",null,"Add the specified number of months to the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let addMonths: (Js.Date.t, float) => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\ndate->ReDate.addMonths(1.)\n")),(0,s.kt)("h3",{id:"submonths"},"subMonths"),(0,s.kt)("p",null,"Subtract the specified number of months from the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let subMonths: (Js.Date.t, float) => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=1., ~date=1., ())\n\ndate->ReDate.subMonths(1.)\n")),(0,s.kt)("h3",{id:"getmonth"},"getMonth"),(0,s.kt)("p",null,"Get the month of the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let getMonth: Js.Date.t => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2019., ~month=4., ~date=1., ())\n\ndate->ReDate.getMonth\n")),(0,s.kt)("h3",{id:"setmonth"},"setMonth"),(0,s.kt)("p",null,"Set the month to the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let setMonth: (Js.Date.t, float) => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2019., ~month=4., ~date=1., ())\n\ndate->ReDate.setMonth(5.)\n")),(0,s.kt)("h3",{id:"differenceincalendarmonths"},"differenceInCalendarMonths"),(0,s.kt)("p",null,"Get the number of calendar months between the given dates."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let differenceInCalendarMonths: (Js.Date.t, Js.Date.t) => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2019., ~month=5., ~date=1., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=1., ~date=1., ())\n\nfstDate->ReDate.differenceInCalendarMonths(sndDate)\n")),(0,s.kt)("h3",{id:"differenceinmonths"},"differenceInMonths"),(0,s.kt)("p",null,"Get the number of full months between the given dates."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let differenceInMonths: (Js.Date.t, Js.Date.t) => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2018., ~month=7., ~date=1., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=6., ~date=31., ())\n\nfstDate->ReDate.differenceInMonths(sndDate)\n")),(0,s.kt)("h3",{id:"startofmonth"},"startOfMonth"),(0,s.kt)("p",null,"Return the start of a month for the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let startOfMonth: Js.Date.t => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMDHMS(~year=2018., ~month=0., ~date=24., ~hours=16., ~minutes=50., ~seconds=12., ())\n\ndate->ReDate.startOfMonth\n")),(0,s.kt)("h3",{id:"endofmonth"},"endOfMonth"),(0,s.kt)("p",null,"Return the end of a month for the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let endOfMonth: Js.Date.t => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMDHMS(~year=2018., ~month=0., ~date=24., ~hours=16., ~minutes=50., ~seconds=12., ())\n\ndate->ReDate.endOfMonth\n")),(0,s.kt)("h3",{id:"isfirstdayofmonth"},"isFirstDayOfMonth"),(0,s.kt)("p",null,"Is the given date the first day of a month?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let isFirstDayOfMonth: Js.Date.t => bool\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\ndate->ReDate.isFirstDayOfMonth\n")),(0,s.kt)("h3",{id:"islastdayofmonth"},"isLastDayOfMonth"),(0,s.kt)("p",null,"Is the given date the last day of a month?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let isLastDayOfMonth: Js.Date.t => bool\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=31., ())\n\ndate->ReDate.isLastDayOfMonth\n")),(0,s.kt)("h3",{id:"issamemonth"},"isSameMonth"),(0,s.kt)("p",null,"Are the given dates in the same month?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let isSameMonth: (Js.Date.t, Js.Date.t) => bool\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=24., ())\n\nfstDate->ReDate.isSameMonth(sndDate)\n")),(0,s.kt)("h3",{id:"lastdayofmonth"},"lastDayOfMonth"),(0,s.kt)("p",null,"Return the last day of a month for the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let lastDayOfMonth: Js.Date.t => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=12., ())\n\ndate->ReDate.lastDayOfMonth\n")),(0,s.kt)("h3",{id:"getdaysinmonth"},"getDaysInMonth"),(0,s.kt)("p",null,"Get the number of days in a month of the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let getDaysInMonth: Js.Date.t => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=10., ~date=10., ())\n\ndate->ReDate.getDaysInMonth\n")))}c.isMDXComponent=!0}}]);