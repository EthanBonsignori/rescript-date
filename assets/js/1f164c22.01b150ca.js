"use strict";(self.webpackChunkrescript_date_docs=self.webpackChunkrescript_date_docs||[]).push([[24],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return p}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(a),p=r,h=u["".concat(i,".").concat(p)]||u[p]||m[p]||l;return a?n.createElement(h,s(s({ref:t},d),{},{components:a})):n.createElement(h,s({ref:t},d))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<l;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},520:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),s=["components"],o={id:"common",title:"Common"},i=void 0,c={unversionedId:"common",id:"common",title:"Common",description:"isEqual",source:"@site/api/common.md",sourceDirName:".",slug:"/common",permalink:"/rescript-date/api/common",tags:[],version:"current",frontMatter:{id:"common",title:"Common"},sidebar:"sidebar",next:{title:"Interval",permalink:"/rescript-date/api/interval"}},d=[{value:"isEqual",id:"isequal",children:[],level:3},{value:"isBefore",id:"isbefore",children:[],level:3},{value:"isAfter",id:"isafter",children:[],level:3},{value:"isFuture",id:"isfuture",children:[],level:3},{value:"isPast",id:"ispast",children:[],level:3},{value:"compareAsc",id:"compareasc",children:[],level:3},{value:"compareDesc",id:"comparedesc",children:[],level:3},{value:"max",id:"max",children:[],level:3},{value:"min",id:"min",children:[],level:3},{value:"isValid",id:"isvalid",children:[],level:3},{value:"closestTo",id:"closestto",children:[],level:3}],m={toc:d};function u(e){var t=e.components,a=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"isequal"},"isEqual"),(0,l.kt)("p",null,"Are the given dates equal?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let isEqual: (Js.Date.t, Js.Date.t) => bool\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\nfstDate->ReDate.isEqual(sndDate)\n")),(0,l.kt)("h3",{id:"isbefore"},"isBefore"),(0,l.kt)("p",null,"Is the first date before the second one?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let isBefore: (Js.Date.t, Js.Date.t) => bool\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=2., ())\n\nfstDate->ReDate.isBefore(sndDate)\n")),(0,l.kt)("h3",{id:"isafter"},"isAfter"),(0,l.kt)("p",null,"Is the first date after the second one?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let isAfter: (Js.Date.t, Js.Date.t) => bool\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=2., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\nfstDate->ReDate.isAfter(sndDate)\n")),(0,l.kt)("h3",{id:"isfuture"},"isFuture"),(0,l.kt)("p",null,"Is the given date in the future?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let isFuture: Js.Date.t => bool\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2030., ~month=0., ~date=1., ())\n\ndate->ReDate.isFuture\n")),(0,l.kt)("h3",{id:"ispast"},"isPast"),(0,l.kt)("p",null,"Is the given date in the past?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let isPast: Js.Date.t => bool\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=1999., ~month=0., ~date=1., ())\n\ndate->ReDate.isPast\n")),(0,l.kt)("h3",{id:"compareasc"},"compareAsc"),(0,l.kt)("p",null,"Compare the two dates and return 1 if the first date is after the second, -1 if the first date is before the second or 0 if dates are equal."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let compareAsc: (Js.Date.t, Js.Date.t) => int\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let a = Js.Date.makeWithYMD(~year=1999., ~month=0., ~date=1., ())\nlet b = Js.Date.makeWithYMD(~year=2017., ~month=2., ~date=1., ())\nlet c = Js.Date.makeWithYMD(~year=2017., ~month=4., ~date=1., ())\nlet d = Js.Date.makeWithYMD(~year=2018., ~month=12., ~date=1., ())\n\nlet unsortedArray = [d, b, c, a]\n\nBelt.SortArray.stableSortBy(unsortedArray, ReDate.compareAsc)\n")),(0,l.kt)("h3",{id:"comparedesc"},"compareDesc"),(0,l.kt)("p",null,"Compare the two dates and return -1 if the first date is after the second, 1 if the first date is before the second or 0 if dates are equal."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let compareDesc: (Js.Date.t, Js.Date.t) => int\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let a = Js.Date.makeWithYMD(~year=1999., ~month=0., ~date=1., ())\nlet b = Js.Date.makeWithYMD(~year=2017., ~month=2., ~date=1., ())\nlet c = Js.Date.makeWithYMD(~year=2017., ~month=4., ~date=1., ())\nlet d = Js.Date.makeWithYMD(~year=2018., ~month=12., ~date=1., ())\n\nlet unsortedArray = [a, b, d, c]\n\nBelt.SortArray.stableSortBy(unsortedArray, ReDate.compareDesc)\n")),(0,l.kt)("h3",{id:"max"},"max"),(0,l.kt)("p",null,"Return the latest of the given dates."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let max: array<Js.Date.t> => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let a = Js.Date.makeWithYMD(~year=1999., ~month=0., ~date=1., ())\nlet b = Js.Date.makeWithYMD(~year=2017., ~month=2., ~date=1., ())\nlet c = Js.Date.makeWithYMD(~year=2017., ~month=4., ~date=1., ())\nlet d = Js.Date.makeWithYMD(~year=2018., ~month=12., ~date=1., ())\n\nlet dates = [b, c, d, a]\n\ndates->ReDate.max\n")),(0,l.kt)("h3",{id:"min"},"min"),(0,l.kt)("p",null,"Return the earliest of the given dates."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let min: array<Js.Date.t> => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let a = Js.Date.makeWithYMD(~year=1999., ~month=0., ~date=1., ())\nlet b = Js.Date.makeWithYMD(~year=2017., ~month=2., ~date=1., ())\nlet c = Js.Date.makeWithYMD(~year=2017., ~month=4., ~date=1., ())\nlet d = Js.Date.makeWithYMD(~year=2018., ~month=12., ~date=1., ())\n\nlet dates = [b, c, d, a]\n\ndates->ReDate.min\n")),(0,l.kt)("h3",{id:"isvalid"},"isValid"),(0,l.kt)("p",null,"Is the given date valid?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let isValid: (~year: float, ~month: float, ~date: float, ~hours: float=?, ~minutes: float=?, ~seconds: float=?, unit) => bool\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"ReDate.isValid(~year=1999., ~month=1., ~date=29., ())\n")),(0,l.kt)("h3",{id:"closestto"},"closestTo"),(0,l.kt)("p",null,"Return a date from the array closest to the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let closestTo: (Js.Date.t, array<Js.Date.t>) => option<Js.Date.t>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\nlet a = Js.Date.makeWithYMD(~year=1999., ~month=0., ~date=1., ())\nlet b = Js.Date.makeWithYMD(~year=2018., ~month=2., ~date=1., ())\nlet c = Js.Date.makeWithYMD(~year=2020., ~month=4., ~date=1., ())\nlet d = Js.Date.makeWithYMD(~year=2022., ~month=12., ~date=1., ())\n\nlet dates = [a, b, c, d]\n\ndate->ReDate.closestTo(dates)\n")))}u.isMDXComponent=!0}}]);