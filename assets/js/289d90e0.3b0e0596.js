"use strict";(self.webpackChunkrescript_date_docs=self.webpackChunkrescript_date_docs||[]).push([[94],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),o=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=o(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=o(a),m=n,f=u["".concat(i,".").concat(m)]||u[m]||p[m]||l;return a?r.createElement(f,s(s({ref:t},c),{},{components:a})):r.createElement(f,s({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,s=new Array(l);s[0]=u;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:n,s[1]=d;for(var o=2;o<l;o++)s[o]=a[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5798:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return d},contentTitle:function(){return i},metadata:function(){return o},toc:function(){return c},default:function(){return u}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),s=["components"],d={id:"year",title:"Year"},i=void 0,o={unversionedId:"api/year",id:"api/year",isDocsHomePage:!1,title:"Year",description:"addYears",source:"@site/docs/api/year.md",sourceDirName:"api",slug:"/api/year",permalink:"/rescript-date/docs/api/year",editUrl:"https://github.com/mobily/rescript-date/edit/master/docs/docs/api/year.md",tags:[],version:"current",lastUpdatedAt:1636805091,formattedLastUpdatedAt:"11/13/2021",frontMatter:{id:"year",title:"Year"},sidebar:"sidebar",previous:{title:"Month",permalink:"/rescript-date/docs/api/month"},next:{title:"ISO Week",permalink:"/rescript-date/docs/api/iso-week"}},c=[{value:"addYears",id:"addyears",children:[],level:3},{value:"subYears",id:"subyears",children:[],level:3},{value:"getYear",id:"getyear",children:[],level:3},{value:"setYear",id:"setyear",children:[],level:3},{value:"startOfYear",id:"startofyear",children:[],level:3},{value:"endOfYear",id:"endofyear",children:[],level:3},{value:"isSameYear",id:"issameyear",children:[],level:3},{value:"isLeapYear",id:"isleapyear",children:[],level:3},{value:"lastMonthOfYear",id:"lastmonthofyear",children:[],level:3},{value:"lastDayOfYear",id:"lastdayofyear",children:[],level:3},{value:"getDaysInYear",id:"getdaysinyear",children:[],level:3},{value:"differenceInCalendarYears",id:"differenceincalendaryears",children:[],level:3},{value:"differenceInYears",id:"differenceinyears",children:[],level:3}],p={toc:c};function u(e){var t=e.components,a=(0,n.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"addyears"},"addYears"),(0,l.kt)("p",null,"Add the specified number of years to the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let addYears: (Js.Date.t, float) => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=4., ~date=1., ())\n\ndate->ReDate.addYears(1.)\n")),(0,l.kt)("h3",{id:"subyears"},"subYears"),(0,l.kt)("p",null,"Subtract the specified number of years from the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let subYears: (Js.Date.t, float) => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2019., ~month=4., ~date=1., ())\n\ndate->ReDate.subYears(1.)\n")),(0,l.kt)("h3",{id:"getyear"},"getYear"),(0,l.kt)("p",null,"Get the year of the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let getYear: Js.Date.t => float\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2019., ~month=4., ~date=1., ())\n\ndate->ReDate.getYear\n")),(0,l.kt)("h3",{id:"setyear"},"setYear"),(0,l.kt)("p",null,"Set the year to the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let setYear: (Js.Date.t, float) => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2019., ~month=4., ~date=1., ())\n\ndate->ReDate.setYear(2021.)\n")),(0,l.kt)("h3",{id:"startofyear"},"startOfYear"),(0,l.kt)("p",null,"Return the start of a year for the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let startOfYear: Js.Date.t => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=5., ~date=1., ())\n\ndate->ReDate.startOfYear\n")),(0,l.kt)("h3",{id:"endofyear"},"endOfYear"),(0,l.kt)("p",null,"Return the end of a year for the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let endOfYear: Js.Date.t => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=8., ~date=10., ())\n\ndate->ReDate.endOfYear\n")),(0,l.kt)("h3",{id:"issameyear"},"isSameYear"),(0,l.kt)("p",null,"Are the given dates in the same year?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let isSameYear: (Js.Date.t, Js.Date.t) => bool\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2018., ~month=8., ~date=10., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=6., ~date=20., ())\n\nfstDate->ReDate.isSameYear(sndDate)\n")),(0,l.kt)("h3",{id:"isleapyear"},"isLeapYear"),(0,l.kt)("p",null,"Is the given date in the leap year?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let isLeapYear: Js.Date.t => bool\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2020., ~month=8., ~date=10., ())\n\ndate->ReDate.isLeapYear\n")),(0,l.kt)("h3",{id:"lastmonthofyear"},"lastMonthOfYear"),(0,l.kt)("p",null,"Return the last month of a year for the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let lastMonthOfYear: Js.Date.t => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=8., ~date=10., ())\n\ndate->ReDate.lastMonthOfYear\n")),(0,l.kt)("h3",{id:"lastdayofyear"},"lastDayOfYear"),(0,l.kt)("p",null,"Return the last day of a year for the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let lastDayOfYear: Js.Date.t => Js.Date.t\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=8., ~date=10., ())\n\ndate->ReDate.lastDayOfYear\n")),(0,l.kt)("h3",{id:"getdaysinyear"},"getDaysInYear"),(0,l.kt)("p",null,"Get the number of days in a year of the given date."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let getDaysInYear: Js.Date.t => float\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=10., ~date=10., ())\n\ndate->ReDate.getDaysInYear\n")),(0,l.kt)("h3",{id:"differenceincalendaryears"},"differenceInCalendarYears"),(0,l.kt)("p",null,"Get the number of calendar years between the given dates."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let differenceInCalendarYears: (Js.Date.t, Js.Date.t) => float\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2020., ~month=5., ~date=1., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=1., ~date=1., ())\n\nfstDate->ReDate.differenceInCalendarYears(sndDate)\n")),(0,l.kt)("h3",{id:"differenceinyears"},"differenceInYears"),(0,l.kt)("p",null,"Get the number of full years between the given dates."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let differenceInYears: (Js.Date.t, Js.Date.t) => float\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2016., ~month=0., ~date=1., ())\n\nfstDate->ReDate.differenceInYears(sndDate)\n")))}u.isMDXComponent=!0}}]);