"use strict";(self.webpackChunkrescript_date_docs=self.webpackChunkrescript_date_docs||[]).push([[277],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),o=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=o(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),p=o(a),m=r,y=p["".concat(i,".").concat(m)]||p[m]||c[m]||s;return a?n.createElement(y,l(l({ref:t},u),{},{components:a})):n.createElement(y,l({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=p;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:r,l[1]=d;for(var o=2;o<s;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3152:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return d},contentTitle:function(){return i},metadata:function(){return o},toc:function(){return u},default:function(){return p}});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),l=["components"],d={id:"day",title:"Day"},i=void 0,o={unversionedId:"day",id:"day",title:"Day",description:"addDays",source:"@site/api/day.md",sourceDirName:".",slug:"/day",permalink:"/rescript-date/api/day",tags:[],version:"current",frontMatter:{id:"day",title:"Day"},sidebar:"sidebar",previous:{title:"Hour",permalink:"/rescript-date/api/hour"},next:{title:"Week",permalink:"/rescript-date/api/week"}},u=[{value:"addDays",id:"adddays",children:[],level:3},{value:"addBusinessDays",id:"addbusinessdays",children:[],level:3},{value:"subDays",id:"subdays",children:[],level:3},{value:"getDate",id:"getdate",children:[],level:3},{value:"setDate",id:"setdate",children:[],level:3},{value:"startOfDay",id:"startofday",children:[],level:3},{value:"endOfDay",id:"endofday",children:[],level:3},{value:"differenceInCalendarDays",id:"differenceincalendardays",children:[],level:3},{value:"differenceInDays",id:"differenceindays",children:[],level:3},{value:"differenceInBusinessDays",id:"differenceinbusinessdays",children:[],level:3},{value:"getDayOfYear",id:"getdayofyear",children:[],level:3},{value:"isSameDay",id:"issameday",children:[],level:3},{value:"isToday",id:"istoday",children:[],level:3},{value:"isTomorrow",id:"istomorrow",children:[],level:3},{value:"isYesterday",id:"isyesterday",children:[],level:3}],c={toc:u};function p(e){var t=e.components,a=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"type day =\n  | Sunday\n  | Monday\n  | Tuesday\n  | Wednesday\n  | Thursday\n  | Friday\n  | Saturday\n")),(0,s.kt)("h3",{id:"adddays"},"addDays"),(0,s.kt)("p",null,"Add the specified number of days to the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let addDays: (Js.Date.t, float) => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\ndate->ReDate.addDays(5.)\n")),(0,s.kt)("h3",{id:"addbusinessdays"},"addBusinessDays"),(0,s.kt)("p",null,"Add the specified number of business days to the given date (excluding weekends)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let addBusinessDays: (Js.Date.t, float) => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\ndate->ReDate.addBusinessDays(5.)\n")),(0,s.kt)("h3",{id:"subdays"},"subDays"),(0,s.kt)("p",null,"Subtract the specified number of days from the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let subDays: (Js.Date.t, float) => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\ndate->ReDate.subDays(5.)\n")),(0,s.kt)("h3",{id:"getdate"},"getDate"),(0,s.kt)("p",null,"Get the day of the month of the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let getDate: Js.Date.t => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\ndate->ReDate.getDate\n")),(0,s.kt)("h3",{id:"setdate"},"setDate"),(0,s.kt)("p",null,"Set the day of the month to the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let setDate: (Js.Date.t, float) => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\ndate->ReDate.setDate(23.)\n")),(0,s.kt)("h3",{id:"startofday"},"startOfDay"),(0,s.kt)("p",null,"Return the start of a day for the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let startOfDay: Js.Date.t => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMDHMS(~year=2018., ~month=0., ~date=1., ~hours=16., ~minutes=50., ~seconds=12., ())\n\ndate->ReDate.startOfDay\n")),(0,s.kt)("h3",{id:"endofday"},"endOfDay"),(0,s.kt)("p",null,"Return the end of a day for the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let endOfDay: Js.Date.t => Js.Date.t\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMDHMS(~year=2018., ~month=0., ~date=1., ~hours=16., ~minutes=50., ~seconds=12., ())\n\ndate->ReDate.endOfDay\n")),(0,s.kt)("h3",{id:"differenceincalendardays"},"differenceInCalendarDays"),(0,s.kt)("p",null,"Get the number of calendar days between the given dates. This means that the times are removed from the dates and then the difference in days is calculated."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let differenceInCalendarDays: (Js.Date.t, Js.Date.t) => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2019., ~month=0., ~date=1., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=1., ())\n\nfstDate->ReDate.differenceInCalendarDays(sndDate)\n")),(0,s.kt)("h3",{id:"differenceindays"},"differenceInDays"),(0,s.kt)("p",null,"Get the number of full day periods between the given dates."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let differenceInDays: (Js.Date.t, Js.Date.t) => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMDHMS(~year=2018., ~month=0., ~date=10., ~hours=10., ~minutes=15., ~seconds=55., ())\nlet sndDate = Js.Date.makeWithYMDHMS(~year=2018., ~month=0., ~date=2., ~hours=20., ~minutes=50., ~seconds=10., ())\n\nfstDate->ReDate.differenceInDays(sndDate)\n")),(0,s.kt)("h3",{id:"differenceinbusinessdays"},"differenceInBusinessDays"),(0,s.kt)("p",null,"Get the number of full day periods between the given dates."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let differenceInBusinessDays: (Js.Date.t, Js.Date.t) => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=10., ())\nlet sndDate = Js.Date.makeWithYMD(~year=2018., ~month=0., ~date=2., ())\n\nfstDate->ReDate.differenceInBusinessDays(sndDate)\n")),(0,s.kt)("h3",{id:"getdayofyear"},"getDayOfYear"),(0,s.kt)("p",null,"Get the day of the year of the given date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let getDayOfYear: Js.Date.t => float\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.makeWithYMD(~year=2018., ~month=7., ~date=23., ())\n\ndate->ReDate.getDayOfYear\n")),(0,s.kt)("h3",{id:"issameday"},"isSameDay"),(0,s.kt)("p",null,"Are the given dates in the same day?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let isSameDay: (Js.Date.t, Js.Date.t) => bool\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let fstDate = Js.Date.makeWithYMDHMS(~year=2018., ~month=0., ~date=1., ~hours=16., ~minutes=50., ~seconds=12., ())\nlet sndDate = Js.Date.makeWithYMDHMS(~year=2018., ~month=0., ~date=1., ~hours=10., ~minutes=15., ~seconds=55., ())\n\nfstDate->ReDate.isSameDay(sndDate)\n")),(0,s.kt)("h3",{id:"istoday"},"isToday"),(0,s.kt)("p",null,"Is the given date today?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let isToday: Js.Date.t => bool\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.make()\n\ndate->ReDate.isToday\n")),(0,s.kt)("h3",{id:"istomorrow"},"isTomorrow"),(0,s.kt)("p",null,"Is the given date tomorrow?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let isTomorrow: Js.Date.t => bool\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.make()\n\ndate->ReDate.addDays(.1)->ReDate.isTomorrow\n")),(0,s.kt)("h3",{id:"isyesterday"},"isYesterday"),(0,s.kt)("p",null,"Is the given date yesterday?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let isYesterday: Js.Date.t => bool\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let date = Js.Date.make()\n\ndate->ReDate.subDays(1.)->ReDate.isYesterday\n")))}p.isMDXComponent=!0}}]);